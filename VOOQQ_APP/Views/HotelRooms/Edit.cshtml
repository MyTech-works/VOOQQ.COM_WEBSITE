@model VOOQQ_APP.Models.HotelRooms

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_PostLayout.cshtml";
}


<div class="page-header" style="background: url(assets/img/banner1.jpg);">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="breadcrumb-wrapper">
                    <h2 class="product-title">For Hotel Rooms</h2>
                    <ol class="breadcrumb">
                        <li>
                            <a href="/">Home /</a>
                        </li>
                        <li class="current">Post you Ads</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "HotelRooms", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Image1)
    @Html.HiddenFor(model => model.Image2)
    @Html.HiddenFor(model => model.Image3)
    @Html.HiddenFor(model => model.VId)
    @Html.HiddenFor(model => model.Views)
    @Html.HiddenFor(model => model.Date)
    @Html.HiddenFor(model => model.HotelRoomId)
    @Html.HiddenFor(model => model.UserId)
    @Html.HiddenFor(model => model.EndDate)
    @Html.HiddenFor(model => model.StratDate) @Html.HiddenFor(model => model.Status)
    <div class="form-horizontal">

        <div id="content" class="section-padding">
            <div class="container">
                <div class="row">
                    <div class="col-sm-12 col-md-6 ">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @maxlength = "150", placeholder = "The Name must be 10 at least 150 characters long" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PropertyTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.DropDownListFor(m => m.PropertyTypeId,
                    new SelectList(ViewBag.HotelRoomPropertyType, "PropertyTypeId", "PropertyTypeName"),
                    "Select Property",
                    new { @class = "form-control input-height", @onchange="FillCity()" })

                                @Html.ValidationMessageFor(model => model.PropertyTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ClassTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.DropDownListFor(m => m.ClassTypeId,
                    new SelectList(ViewBag.HotelRoomClassType, "ClassTypeId", "ClassTypeName"),
                    "Select Class",
                    new { @class = "form-control input-height", @onchange="FillCity()" })

                                @Html.ValidationMessageFor(model => model.ClassTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CheckIn, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.CheckIn, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                @Html.ValidationMessageFor(model => model.CheckIn, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CheckOut, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.CheckOut, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                @Html.ValidationMessageFor(model => model.CheckOut, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsParking, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsParking)
                                    @Html.ValidationMessageFor(model => model.IsParking, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsBreakfast, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsBreakfast)
                                    @Html.ValidationMessageFor(model => model.IsBreakfast, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsEscalator, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsEscalator)
                                    @Html.ValidationMessageFor(model => model.IsEscalator, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsRoomService, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsRoomService)
                                    @Html.ValidationMessageFor(model => model.IsRoomService, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsRestaurant, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsRestaurant)
                                    @Html.ValidationMessageFor(model => model.IsRestaurant, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsBar, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsBar)
                                    @Html.ValidationMessageFor(model => model.IsBar, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsSpaMassage, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsSpaMassage)
                                    @Html.ValidationMessageFor(model => model.IsSpaMassage, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsSwimmingPool, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsSwimmingPool)
                                    @Html.ValidationMessageFor(model => model.IsSwimmingPool, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <input id="tg-photogallery1" class="btn btn-common" type="file" name="file1">
                            </div>
                        </div>  <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <input id="tg-photogallery2" class="btn btn-common" type="file" name="file2">
                            </div>
                        </div>  <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <input id="tg-photogallery3" class="btn btn-common" type="file" name="file3">
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-12 col-md-6">


                        <div class="form-group">
                            @Html.LabelFor(model => model.InternetTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.DropDownListFor(m => m.InternetTypeID,
                    new SelectList(ViewBag.HotelRoomInternetType, "InternetTypeId", "InternetTypeName"),
                    "Select Internet",
                    new { @class = "form-control input-height", @onchange="FillCity()" })

                                @Html.ValidationMessageFor(model => model.InternetTypeID, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LandPhone, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.LandPhone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LandPhone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @cols = 80, @rows = 4, @maxlength = "3000", placeholder = "The description must be 10 at least 3000 characters long" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.Image1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">



                                <div id="dvPreview1" class="tg-fileuploadlabel">  </div>
                                <img src="@Model.Image1" style="height:100px;width: 100px" alt="" />

                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div id="dvPreview2" class="tg-fileuploadlabel"> </div>
                                <img src="@Model.Image2" style="height:100px;width: 100px" alt="" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Image3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-12">
                                <div id="dvPreview3" class="tg-fileuploadlabel"> </div>
                                <img src="@Model.Image3" style="height:100px;width: 100px" alt="" />
                            </div>
                        </div>
                        <input id="Image_one" type="hidden" name="Image1" />
                        <input id="Image_two" type="hidden" name="Image2" />
                        <input id="Image_three" type="hidden" name="Image3" />
                        <input id="VId" type="hidden" name="VId" value="6" />
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-12">
                                <input type="submit" value="Update" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </div>



                <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
                <script language="javascript" type="text/javascript">
                    $(function () {
                        $("#tg-photogallery1").change(function () {
                            if (typeof (FileReader) != "undefined") {
                                var dvPreview = $("#dvPreview1");
                                dvPreview.html("");
                                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.jpg|.jpeg|.gif|.png|.bmp)$/;
                                $($(this)[0].files).each(function () {
                                    var file = $(this);
                                    if (regex.test(file[0].name.toLowerCase())) {
                                        var reader = new FileReader();
                                        reader.onload = function (e) {
                                            uploadprogressstart(file[0].name);
                                            var img = $("<img />");
                                            img.attr("style", "height:100px;width: 100px");
                                            img.attr("src", e.target.result);
                                            dvPreview.append(img);
                                            $("#Image_one").val(file[0].name);
                                        }
                                        reader.readAsDataURL(file[0]);
                                    } else {
                                        alert(file[0].name + " is not a valid image file.");
                                        dvPreview.html("");
                                        return false;
                                    }
                                });
                            } else {
                                alert("This browser does not support HTML5 FileReader.");
                            }
                        });
                    });
                    $(function () {
                        $("#tg-photogallery2").change(function () {
                            if (typeof (FileReader) != "undefined") {
                                var dvPreview = $("#dvPreview2");
                                dvPreview.html("");
                                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.jpg|.jpeg|.gif|.png|.bmp)$/;
                                $($(this)[0].files).each(function () {
                                    var file = $(this);
                                    if (regex.test(file[0].name.toLowerCase())) {
                                        var reader = new FileReader();
                                        reader.onload = function (e) {
                                            uploadprogressstart(file[0].name);
                                            var img = $("<img />");
                                            img.attr("style", "height:100px;width: 100px");
                                            img.attr("src", e.target.result);
                                            dvPreview.append(img);
                                            $("#Image_two").val(file[0].name);
                                        }
                                        reader.readAsDataURL(file[0]);
                                    } else {
                                        alert(file[0].name + " is not a valid image file.");
                                        dvPreview.html("");
                                        return false;
                                    }
                                });
                            } else {
                                alert("This browser does not support HTML5 FileReader.");
                            }
                        });
                    });
                    $(function () {
                        $("#tg-photogallery3").change(function () {
                            if (typeof (FileReader) != "undefined") {
                                var dvPreview = $("#dvPreview3");
                                dvPreview.html("");
                                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.jpg|.jpeg|.gif|.png|.bmp)$/;
                                $($(this)[0].files).each(function () {
                                    var file = $(this);
                                    if (regex.test(file[0].name.toLowerCase())) {
                                        var reader = new FileReader();
                                        reader.onload = function (e) {
                                            uploadprogressstart(file[0].name);
                                            var img = $("<img />");
                                            img.attr("style", "height:100px;width: 100px");
                                            img.attr("src", e.target.result);
                                            dvPreview.append(img);
                                            $("#Image_three").val(file[0].name);
                                        }
                                        reader.readAsDataURL(file[0]);
                                    } else {
                                        alert(file[0].name + " is not a valid image file.");
                                        dvPreview.html("");
                                        return false;
                                    }
                                });
                            } else {
                                alert("This browser does not support HTML5 FileReader.");
                            }
                        });
                    });
                </script>


            </div>
        </div>
    </div>
}
<div id="map"></div>



<script>
    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 22.3038945, lng: 70.80215989999999 },
            zoom: 13
        });
        var input = document.getElementById('Location');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();

            /* If the place has a geometry, then present it on a map. */
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);

            /* Location details */
            document.getElementById('location-snap').innerHTML = place.formatted_address;
            document.getElementById('lat-span').innerHTML = place.geometry.location.lat();
            document.getElementById('lon-span').innerHTML = place.geometry.location.lng();
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhT3TomkfVQa-uIcn-JaQlPhdlXBsIvxg&libraries=places&callback=initMap" async defer></script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
